정렬이란?
- 데이터를 순서대로 나열하는 방법
- 정렬을 시키기 위해서 명확한 과정을 설명해줘야한다.

버블 정렬
- 두번째와 세번째 자료를 비교 후 교환하는 방식으로 앞과 뒤를 비교하면서 위치를 변경한다.
- 한번 진행이 되었을때 가장 큰 수가 제일 뒤로가는 형식이라 한번 진행을 하고 맨뒤에는 진행하지 않아도 된다.

선택정렬
- 이름같이 선택해서 정렬을 한다.
- 각 배열을 탐색하는 형식이라 2중 반복문을 써야한다.
- 모든 값을 확인하고 앞에서 부터 1개씩 정리한다.
- 가장 낮은 값부터 정렬한다.
   [4, 6, 2, 9, 1]
1. [1, 6, 2, 9, 4]
    -  -  -  -  -
2. [1, 2, 6, 9, 4]
       -  -  -  -
3. [1, 2, 4, 9, 6]
          -  -  -
4. [1, 2, 4, 6, 9]
             -  -
             마지막은 1개라 비교하지 않는다.

삽입정렬
- 필요할때만 정렬을 하는 방식
- 삽입 정렬은 전체에서 하나씩 올바른 위치에 삽입 하는 방식
    [4, 6, 2, 9, 1]
1.  [4, 6, 2, 9, 1]
앞에 있는 4와 6을 비교
2.  [4, 6, 2, 9, 1] -> [2, 4, 6, 9, 1]
      <-<-<-  2를 순차적으로 이동
3.  [2, 4, 6, 9, 1]
              9와 6을 비교 비교 후 뒤에 값이 더 커서 그냥 둔다
4.  [2, 4, 6, 9, 1] -> [1, 2, 4, 6, 9]
     <-<-<- <- <-   맨뒤에 1을 앞에 숫자부터 비교해 가지고 온다.

병합 정렬 -merge

- 병합 정렬은 배열의 앞부분과 뒷부분의 두 그룹으로 나누어 
각각 정렬한 후 병합하는 작업을 반복하는 알고리즘이다.
        ↓
1단계 : [1, 2, 3, 5] 
        ↓
       [4, 6, 7, 8] 
        1과 4를 비교합니다!
        1 < 4 이므로 1을 C 에 넣습니다.
     C:[1]
           ↓
2단계 : [1, 2, 3, 5] 
        ↓
       [4, 6, 7, 8] 
        2와 4를 비교합니다!
        2 < 4 이므로 2를 C 에 넣습니다.
     C:[1, 2]
              ↓
3단계 : [1, 2, 3, 5] 
        ↓
       [4, 6, 7, 8] 
        3과 4를 비교합니다!
        3 < 4 이므로 3을 C 에 넣습니다.
     C:[1, 2, 3]
                 ↓
3단계 : [1, 2, 3, 5] 
        ↓
       [4, 6, 7, 8] 
        5와 4를 비교합니다!
        5 > 4 이므로 4을 C 에 넣습니다.
     C:[1, 2, 3, 4]
                 ↓
3단계 : [1, 2, 3, 5] 
           ↓
       [4, 6, 7, 8] 
        5와 6을 비교합니다!
        5 < 6 이므로 5을 C 에 넣습니다.
     C:[1, 2, 3, 4, 5]

병합 정렬 -mergeSort
- 분할 정복은 문제를 작은 2개의 문제로 분리하고 각각을 해결한 다음, 
결과를 모아서 원래의 문제를 해경하는 전략

스택
스택이란?
- 한쪽 끝으로만 자료를 넣고 뺄 수 있는 자료구조.
이런 자료 구조를 Last In First Out 이라고 해서 LIFO 라고 부른다.
이런 자료구조가 필요한 이유는 순서를 쌓아두고 있기 때문에 그 순서가 필요한 경우가 있다.

push(data) : 맨 앞에 데이터 넣기
pop() : 맨 앞의 데이터 뽑기
peek() : 맨 앞의 데이터 보기
isEmpty(): 스택이 비었는지 안 비었는지 여부 반환해주기

큐
큐란?
- 한쪽 끝으로는 자료를 넣고 반대쪽으로 자료를 빼는 구조
- 데이터를 한쪽 끝으로만 넣고 한쪽으로는 넣기만 한다.
First In First Out 이라고 해서 FIFO 라고 부릅니다.
이런 자료구조가 필요한 이유는 순서대로 처리되어야 하는 일에 필요하기 때문에 필요하다

enqueue(data) : 맨 뒤에 데이터 추가하기 
dequeue() : 맨 앞의 데이터 뽑기
peek() : 맨 앞의 데이터 보기
isEmpty(): 큐가 비었는지 안 비었는지 여부 반환해주기

데이터를 넣고 뽑는 걸 자주하는 자료 구조로 링크드 리스트와 유사하게 구현할 수 있다.

해쉬 테이블
해쉬 테이블이란?
-딕셔너리와 같은 구조로 키로 데이터를 저장하고 찾을 수 있는 방법이다.

딕셔너리는 내부적으로 배열을 사용한다.
